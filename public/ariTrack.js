/**
 * ÊåáÂì™È£ûÂì™
 * ÂàùÂßãÂåñ options{}
 * options.viewer: cesium viewer
 * options.initPosition : Cesium.Cartesian3.fromDegrees(long, lat, height)
 * ‰æãÂ¶ÇÔºö
 * this.droneAnimator = new DroneFlightAnimator({ viewer, Cesium.Cartesian3.fromDegrees(118.8, 31.9052, 28) }, (msg) => {
      console.log(msg)
   })
*/
class DroneFlightAnimator {
  constructor(options,callback) {
    this.viewer = options.viewer;
    this.initPosition = options.initPosition
    this.droneEntity = this.viewer.entities.add({
      position:this.initPosition,
      model: {
        uri: 'air.glb', // ËØ∑ÊõøÊç¢‰∏∫ÂÆûÈôÖÁöÑÊó†‰∫∫Êú∫Ê®°ÂûãË∑ØÂæÑ
        minimumPixelSize: 64,
      },
    });
    this.flightPath = null;
    this.callback = callback
    this.primitivesone = null;
    this.primitivestwo = null;
    this.spotLightCamera = null;
    this.tickHandler = null; // È£ûË°å‰ªªÂä°
  }
  
  /**
   * options{}
   * options.aircraftLongitude   // Êó†‰∫∫Êú∫ÁªèÂ∫¶ÔºàÂøÖ‰º†Ôºâ
   * options.aircraftLatitude     // Êó†‰∫∫Êú∫Á∫¨Â∫¶ÔºàÂøÖ‰º†Ôºâ
   * options.aircraftAltitude     // Êó†‰∫∫Êú∫È´òÂ∫¶ÔºàÂøÖ‰º†Ôºâ
   * options.gimbalPitchValue     // Êó†‰∫∫Êú∫‰∫ëÂè∞‰øØ‰ª∞Ëßí
   * options.gimbalYawValue     // Êó†‰∫∫Êú∫‰∫ëÂè∞ÂÅèËà™Ëßí
   * options.isShoot      // ÊòØÂê¶‰∏∫ÊãçÊëÑÁÇπ
  */
  flyTo(options) {
    // console.log(options);
    this.RemovePrimitives()    
    let destination = Cesium.Cartesian3.fromDegrees(options.aircraftLongitude, options.aircraftLatitude, options.aircraftAltitude)
    const startLocation = this.droneEntity.position.getValue(Cesium.JulianDate.now());
    const startTime = Cesium.JulianDate.now();

    const distance = Cesium.Cartesian3.distance(startLocation, destination);
    const duration = distance / 50; // ÂÅáËÆæÈÄüÂ∫¶‰∏∫ÊØèÁßí5Á±≥

    const positions = [startLocation];
    // console.log('00000000000000000',positions);

    this.flightPath = this.viewer.entities.add({
      polyline: {
        positions: new Cesium.CallbackProperty(() => {
          // console.log('====================',positions);
          return positions;
        }, false),
        width: 3,
        material: Cesium.Color.RED
      },
    });
    // ÂºÄÂßãÈ£ûË°åÔºåÁõëÂê¨
    // ÈÄöËøáËÆ°ÁÆóÂΩìÂâçÈ£ûË°åÊó∂Èó¥‰∏éÊÄªËÆ°È£ûË°åÊó∂Èó¥ÁöÑÊØî‰æãtÔºåÂà§Êñ≠È£ûÊú∫ÊúâÊ≤°ÊúâÈ£ûË°åÁªìÊùü
    this.tickHandler=()=>{
      // console.log('ttttttttttttttttttttttt');
      const elapsedSeconds = Cesium.JulianDate.secondsDifference(
        Cesium.JulianDate.now(),
        startTime
      );
      const t = elapsedSeconds / duration;
      // console.log(t);
      // Ë°®Á§∫È£ûË°åÁªìÊùü
      if (t >= 1.0) {
        // console.log(t);

        // ËøôÈáåÈùûÂ∏∏ÈáçË¶Å
        // ‰∏ÄÂÆöË¶ÅÊõ¥Êñ∞‰∏ÄÊ¨°t=1ÁöÑÊó∂ÂÄôÈ£ûÊú∫‰ª•ÂèäËà™Á∫ø‰ΩçÁΩÆ
        // ‰∏çÁÑ∂t=0.971523180793504Êó∂È£ûË°åÂç≥ÁªìÊùüÔºåËøôÊó∂ÂÄôÂÖ∂ÂÆûÈ£ûÊú∫ËøòÊ≤°ÊúâÈ£ûË°åÂà∞ÊåáÂÆöÂùêÊ†áÁÇπ
        // t=0Ë°®Á§∫È£ûÊú∫Âú®‰∏ä‰∏™ÂùêÊ†áÁÇπÔºåt=1Ë°®Á§∫È£ûÊú∫Âú®‰∏ã‰∏Ä‰∏™ÂùêÊ†áÁÇπÔºåÔºà0Ôºå1ÔºâË°®Á§∫È£ûÊú∫Âú®‰∏§ÂùêÊ†á‰πãÈó¥
        // üëáüëáüëá ÊâãÂä®ÁªôÈ£ûÊú∫ËÆæÁΩÆÈ£ûË°åÁªìÊùüÂÆÉÂ∫îËØ•Âú®ÁöÑ‰ΩçÁΩÆ
        const newPosition = Cesium.Cartesian3.lerp(
          startLocation,
          destination,
          1,
          new Cesium.Cartesian3()
        );
        this.droneEntity.position.setValue(newPosition);
        positions.push(newPosition);  // Êõ¥Êñ∞ÊúÄÊñ∞ÁöÑÊâÄÊúâ‰ΩçÁΩÆÈõÜÂêàÔºå‰∏∫‰∫ÜÁîªÁ∫ø

        // ÁîªÁÇπ
        this.drawPoint(this.droneEntity.position.getValue(destination))
        if(options.isShoot){
          this.SetLookCone({
            destination,
            gimbalPitchValue:options.gimbalPitchValue,
            gimbalYawValue:options.gimbalYawValue
          })
        }
        // ‰∏≠Êñ≠‰∏ä‰∏ÄÊ¨°È£ûË°å‰ªªÂä°ÔºàÂèñÊ∂à‰∏äÊ¨°‰ªªÂä°ÁªßÁª≠ÁîªÁ∫øÔºâ,Ê≥®ÊÑè‰∏ÄÂÆöË¶ÅÊîæÂú®callbackÂâçÈù¢
        this.tickHandler && this.viewer.clock.onTick.removeEventListener(this.tickHandler);
        this.tickHandler = null
        // È£ûË°åÁªìÊùüÁöÑÂõûË∞É
        this.callback(this.droneEntity.position.getValue(destination),positions)
        return;
      }
      
      // È£ûË°åËøáÁ®ã‰∏≠Ôºåt‰ªé0-1ÂèòÂåñÔºå‰ºöËøîÂõûÈ£ûÊú∫È£ûË°åÁöÑÂÆûÊó∂‰ΩçÁΩÆÔºàÂ∫îËØ•Âú®‰ΩçÁΩÆÔºâ
      const newPosition = Cesium.Cartesian3.lerp(
        startLocation,  // È£ûÊú∫ÂàùÂßã‰ΩçÁΩÆ
        destination,  // È£ûÊú∫ÁªìÊùü‰ΩçÁΩÆ
        t,  // ÁªèËøáÊó∂Èó¥ÊØî‰æã0-1
        new Cesium.Cartesian3()
      );
      // ÁªôÈ£ûÊú∫ËÆæÁΩÆËøô‰∏™‰ΩçÁΩÆÔºåÈ£ûÊú∫Â∞±Âä®Ëµ∑Êù•‰∫Ü
      this.droneEntity.position.setValue(newPosition);
      positions.push(newPosition);  // Êõ¥Êñ∞ÊúÄÊñ∞ÁöÑÊâÄÊúâ‰ΩçÁΩÆÈõÜÂêàÔºå‰∏∫‰∫ÜÁîªÁ∫ø
    }
    this.viewer.clock.onTick.addEventListener(this.tickHandler);
  }
  drawPoint(position){ 
    this.viewer.entities.add({
      // fromDegreesÔºàÁªèÂ∫¶ÔºåÁ∫¨Â∫¶ÔºåÈ´òÂ∫¶ÔºåÊ§≠ÁêÉÔºåÁªìÊûúÔºâ‰ªé‰ª•Â∫¶‰∏∫Âçï‰ΩçÁöÑÁªèÂ∫¶ÂíåÁ∫¨Â∫¶ÂÄºËøîÂõûCartesian3‰ΩçÁΩÆ
      position,
      point: {
        // ÁÇπÁöÑÂ§ßÂ∞èÔºàÂÉèÁ¥†Ôºâ
        pixelSize: 5,
        // ÁÇπ‰ΩçÈ¢úËâ≤ÔºåfromCssColorString ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®CSSÈ¢úËâ≤
        color: Cesium.Color.fromCssColorString('#ee0000'),
        // ËæπÊ°ÜÈ¢úËâ≤
        outlineColor: Cesium.Color.fromCssColorString('#fff'),
        // ËæπÊ°ÜÂÆΩÂ∫¶(ÂÉèÁ¥†)
        outlineWidth: 2,
        // ÊòæÁ§∫Âú®Ë∑ùÁõ∏Êú∫ÁöÑË∑ùÁ¶ªÂ§ÑÁöÑÂ±ûÊÄßÔºåÂ§öÂ∞ëÂå∫Èó¥ÂÜÖÊòØÂèØ‰ª•ÊòæÁ§∫ÁöÑ
        // distanceDisplayCondition: new Cesium.DistanceDisplayCondition(0, 1500),
        // ÊòØÂê¶ÊòæÁ§∫
        show: true
      }
    });
  }
  /**
     * Âà†Èô§ËßÜÈî•
     */
  RemovePrimitives() {
    if (this.primitivesone) {
      this.primitivesone.destroy()
      this.primitivestwo.destroy()
      this.spotLightCamera = null;
    }
  }
  /**
   * ÊãçÁÖßÁîªÂõõÊ£±Èî•
   * value:
   * destination // Cesium.Cartesian3.fromDegrees(options.aircraftLongitude, options.aircraftLatitude, options.aircraftAltitude)
   * gimbalPitchValue // ‰∫ëÂè∞‰øØ‰ª∞Ëßí
   * gimbalYawValue // ‰∫ëÂè∞ÂÅèËà™Ëßí
  */
  SetLookCone(value) {
    // ÂÖàÊää‰πãÂâçÁöÑ‰∫ëÂè∞ÊãçÊëÑËßÜÈî•ÁªôÂà†Èô§
    this.RemovePrimitives()

    // setTimeout(() => {
    //     this.RemovePrimitives()
    // }, 2800)

    // value = this.Lines.filter(function (item) {
    //     return item.shootId == value;
    // });

    // value = value[0]
    let positions = value.destination
    this.spotLightCamera = new Cesium.Camera(this.viewer.scene);
    let spotLightCamera = this.spotLightCamera

    spotLightCamera.setView({
        destination: positions,
        orientation: {
            heading: Cesium.Math.toRadians(value.gimbalYawValue),
            pitch: Cesium.Math.toRadians(value.gimbalPitchValue),
            roll: Cesium.Math.toRadians(0.0)
        }
    });



    let scratchRight = new Cesium.Cartesian3();
    let scratchRotation = new Cesium.Matrix3();
    var scratchOrientation = new Cesium.Quaternion();

    let position = spotLightCamera.positionWC;
    let directions = spotLightCamera.directionWC;
    let up = spotLightCamera.upWC;
    let right = spotLightCamera.rightWC;
    right = Cesium.Cartesian3.negate(right, scratchRight);

    let rotation = scratchRotation;
    Cesium.Matrix3.setColumn(rotation, 0, right, rotation);
    Cesium.Matrix3.setColumn(rotation, 1, up, rotation);
    Cesium.Matrix3.setColumn(rotation, 2, directions, rotation);
    //ËÆ°ÁÆóËßÜÈî•ÂßøÊÄÅ
    let orientation = Cesium.Quaternion.fromRotationMatrix(rotation, scratchOrientation);
    spotLightCamera.frustum.near = 0.1;
    spotLightCamera.frustum.far = 10;
    //ËßÜÈî•ËΩÆÂªìÁ∫øÂõæÂΩ¢

    let instanceOutline = new Cesium.GeometryInstance({
        geometry: new Cesium.FrustumGeometry({
            frustum: spotLightCamera.frustum,
            origin: position,
            orientation: orientation
        }),
        material: Cesium.Color.RED.withAlpha(1),
        id: "pri" + this.viewer.scene.primitives.length + 1,
        attributes: {
            color: Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 0.0, 0.5)),
            show: new Cesium.ShowGeometryInstanceAttribute(true)
        }
    });

    let instance = new Cesium.GeometryInstance({
        geometry: new Cesium.FrustumOutlineGeometry({
            frustum: spotLightCamera.frustum,
            origin: position,
            orientation: orientation
        }),
        material: Cesium.Color.RED.withAlpha(0.1),
        id: "pri0" + this.viewer.scene.primitives.length + 1,
        attributes: {
            color: Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 0.0, 0.0, 1)),
            show: new Cesium.ShowGeometryInstanceAttribute(true)
        }
    });

    // ÁîªËßÜÈî•ÁöÑÊ£±Ëæπ
    this.primitivesone = this.viewer.scene.primitives.add(new Cesium.Primitive({
        geometryInstances: instance,
        appearance: new Cesium.PerInstanceColorAppearance({
            translucent: true,
            flat: true
        }),
        asynchronous: false
    }));
    // console.log(this.primitivesone);

    // ÁîªËßÜÈî•ÁöÑÈù¢
    this.primitivestwo = this.viewer.scene.primitives.add(new Cesium.Primitive({
        geometryInstances: instanceOutline,
        appearance: new Cesium.PerInstanceColorAppearance({
            translucent: true,
            flat: true
        }),
        asynchronous: false
    }));

}
}